plugins{
    id 'java-library'
}

repositories {
    mavenCentral()
}

def jUnitVersion = "5.13.1",
    jUnitPlatformLauncherVersion = "1.13.1",
    restAssuredVersion = "5.5.5"

configurations {
    jaxb
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated-sources/jaxb'
        }
    }
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.schema = "src/test/resources/countries.xsd"

    outputs.dir sourcesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}

compileJava.dependsOn genJaxb

dependencies {
    jaxb("org.glassfish.jaxb:jaxb-xjc:4.0.5")
    testImplementation(
            "org.junit.jupiter:junit-jupiter-api:$jUnitVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion"
    )
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion",
            "org.junit.platform:junit-platform-launcher:$jUnitPlatformLauncherVersion",
    )
}

test{
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events( "started", "skipped", "failed", "standard_error", "standard_out")
            exceptionFormat "short"
        }
        showStandardStreams = true
    }

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}